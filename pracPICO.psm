                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
                    CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.
                    ;
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 05
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00         ;                 ;clear 1 second counter and clear LEDs
                    STORE s0, counter   ;
                    STORE s1, low_sum   ;
                    STORE s2, high_sum  ;
                    ;
                    ;
                    ;
                    ENABLE INTERRUPT    ;               ;enable one second heart beat
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;
      main_program: CALL led_blink
                    ;
                    JUMP main_program   ;
      		    ;
  led_blink:        LOAD s0,00          ;
                    OUTPUT s0, LED_port ;
                    CALL delay_1ms      ;
                    LOAD s0,01          ;
 		    OUTPUT s0, LED_port ;
                    CALL delay_1s       ;
		    RETURN
                    ;            
                    ;
                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
               ISR: STORE s0, ISR_preserve_s0           ;preserve register
                    STORE s1, ISR_preserve_s1
                    STORE s2, ISR_preserve_s2
                    STORE s3, ISR_preserve_s3

                    FETCH s0, counter
                    FETCH s1, low_sum
                    FETCH s2, high_sum

                    COMPARE s0, FF 
                    JUMP Z, average

                    INPUT s3, DATA_IN_PORT ; get audio data to s3
                    ADD s1,s3 ; add audio data s3 to lsb
                    CALL NC, increment	;increment counter
                    ADDCY s2, 00	;add carry to hsb
		    JUMP end

        increment:  ADD s0,01
                    RETURN 

        average:    ; average is the hsb
		    OUTPUT s2, LED_port_val
		    JUMP reset

	reset:	    LOAD s0, 00 ;resets registers to 0
		    LOAD s1,00
		    LOAD s2,00
		    JUMP end

        end:        STORE s1, low_sum
                    STORE s2, high_sum
                    STORE s0, counter

                    FETCH s0, ISR_preserve_s0
                    FETCH s1, ISR_preserve_s1
                    FETCH s2, ISR_preserve_s2
                    FETCH s3, ISR_preserve_s3

                    RETURNI ENABLE


                    ;
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
